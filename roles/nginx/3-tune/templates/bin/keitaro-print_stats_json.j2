#!/usr/bin/env bash

set -e
set -o pipefail

NGINX_KEITARO_STATUS_LOG_SNAPSHOT="{{ nginx_access_log_keitaro_tracker_status }}.snapshot"
KEITARO_CONFIG="/etc/keitaro/config/inventory"
GITHUB_RAWCONTENT="https://raw.githubusercontent.com"

escape() {
  local value="$1"
  if [[ $value == "" ]]; then
    echo 'null'
  elif [[ "${value}" =~ ^\".*\"$ ]]; then
    echo "${value}"
  elif [[ "${value}" =~ ^\{.*\}$ ]]; then
    echo "${value}"
  elif [[ "${value}" =~ ^\[.*\]$ ]]; then
    echo "${value}"
  elif [[ "${value}" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
    echo "${value}"
  else
    echo "\"${value}\""
  fi
}

print_json() {
  local key=""
  local value=""
  local pairs=""
  local pair=""
  while test $# -gt 0; do
    key="${1}"
    value="${2}"
    pair="$(escape "${key}"): $(escape "${value}")"
    if [[ "${pairs}" == "" ]]; then
      pairs="${pair}"
    else
      pairs="${pairs}, ${pair}"
    fi
    shift 2
  done
  echo "{${pairs}}"
}

versions_json() {
  current_installer_version="$(curl -fsSL ${GITHUB_RAWCONTENT}/apliteni/centos_provision/master/RELEASE_VERSION)"
  print_json installer "\"$(get_config_var 'installer_version')\"" \
             current_installer "\"${current_installer_version}\"" \
             php "\"$(php_version)\"" \
             mariadb "\"$(mariadb_version)\"" \
             redis "\"$(redis_version)\"" \
             roadrunner "\"$(roadrunner_version)\""
}

get_config_var() {
  local var_name="${1}"
  grep "${var_name}" "${KEITARO_CONFIG}" | awk -F= '{print $2}'
}

php_version() {
  {{ php_path }} --version | head -n1 | awk '{print $2}'
}

mariadb_version() {
  mysql --version | awk '{print $5}' | sed s/-MariaDB,$//g
}

redis_version() {
  redis-server --version | head -n1 | awk '{print $3}' | sed s/v=//g
}

roadrunner_version() {
  {{ rr_bin }} --help | head -n2 | tail -n1 | awk '{print $2}' | sed s/,// | \
    sed -r -e 's/\x1b\[([0-9]{1,3}(;[0-9]{1,3}){,2})?[mGK]//g'
}

engines_json() {
  print_json php_engine "\"$(get_config_var 'php_engine')\"" \
             db_engine "\"$(get_config_var 'db_engine')\""
}


responses_json() {
  local responses=""
  if [ -f ${NGINX_KEITARO_STATUS_LOG_SNAPSHOT} ]; then
    responses=$(sort ${NGINX_KEITARO_STATUS_LOG_SNAPSHOT} \
                | uniq -c \
                | awk '{print "\"" $2 "\":", $1 ", "}' \
                | sed '$ s/, $//g' \
                | tr -d "\n")
    responses="{${responses}}"
  fi
  echo "${responses}"
}

statuses_json() {
  print_json nontracker "$(statuses_nontracker_json)" \
             tracker "$(statuses_tracker_json)"
}

statuses_nontracker_json() {
  statuses_php_fpm_json 'nontracker'
}

statuses_tracker_json() {
  if [ "$(get_config_var 'php_engine')" == "roadrunner" ]; then
    statuses_tracker_roadrunner_json
  else
    statuses_php_fpm_json 'tracker'
  fi
}

statuses_tracker_roadrunner_json() {
  systemd_output=$(systemctl status roadrunner | grep Active:)
  if [[ "${systemd_output}" =~ 'inactive' ]]; then
    print_json state inactive
  else
    local since=$(date -d "$(echo "${systemd_output}" | awk '{printf "%s %s", $6, $7}')")
    local roadrunner_raw_output=$({{ rr_bin }} http:workers -l plain -c {{ rr_config }})
    local roadrunner_output=$(echo "${roadrunner_raw_output}" | tail -n +4 | head -n -1)
    local idle=$(echo "${roadrunner_output}" | grep ready | wc -l)
    local active=$(echo "${roadrunner_output}" | grep working | wc -l)
    local total=$(echo "${roadrunner_output}" | wc -l)
    local max="$(grep numWorkers: {{ rr_config }} | awk -F': +' '{print $2}')"
    print_json state active \
               since "${since}" \
               "idle processes" "${idle}" \
               "active processes" "${active}" \
               "total processes" "${total}" \
               "max processes" "${max}"

  fi
}

statuses_php_fpm_json() {
  local pool="${1}"
  local pool_config="/etc/php/php-fpm.d/keitaro-${pool}.conf"
  local status_page="$(grep ^pm.status_path "${pool_config}" | awk -F'= *' '{print $2}')"
  if [ "${status_page}" != "" ]; then
    curl_output="$(curl --silent --fail "http://localhost${status_page}")" 
    if [[ "${curl_output}" == '' ]]; then
      print_json state inactive
    else
      local start_time=$(echo "${curl_output}" | grep 'start time' | awk -F': *' '{print $2}')
      local since=$(date -d "$(echo "${start_time}" | sed -e 's|/| |g'  -e 's/:/ /')")
      local idle=$(echo "${curl_output}" | grep '^idle processes' | awk -F': *' '{print $2}')
      local active=$(echo "${curl_output}" | grep '^active processes' | awk -F': *' '{print $2}')
      local total=$(echo "${curl_output}" | grep '^total processes' | awk -F': *' '{print $2}')
      local max="$(grep ^pm.max_children "${pool_config}" | awk -F'= *' '{print $2}')"
      print_json state active \
                 since "${since}" \
                 "idle processes" "${idle}" \
                 "active processes" "${active}" \
                 "total processes" "${total}" \
                 "max processes" "${max}"
    fi
  fi
}

cpu_json() {
  local model_name="$(awk -F': ' '/^model name/ {print $2}' /proc/cpuinfo | head -n1)"
  local frequency_mhz="$(awk -F': ' '/^cpu MHz/ {print $2}' /proc/cpuinfo | head -n1)"
  local cpu_cores="$(grep -w ^processor /proc/cpuinfo  | wc -l)"
  print_json model_name "${model_name}" cpu_cores "${cpu_cores}" frequency_mhz "${frequency_mhz}"
}

load_json() {
  load_1m="$(awk '{print $1}' /proc/loadavg)"
  load_5m="$(awk '{print $2}' /proc/loadavg)"
  load_15m="$(awk '{print $3}' /proc/loadavg)"
  print_json 1m "${load_1m}" 5m "${load_5m}" 15m "${load_15m}"
}

vmstat_json() {
  local keys=($(vmstat | tail -n2 | head -n1))
  local values=($(vmstat | tail -n1))
  local print_json_args=""
  for i in "${!keys[@]}"; do
    print_json_args="${print_json_args} ${keys[$i]} ${values[$i]}"
  done
  print_json ${print_json_args}
}

memory_json() {
  # ---------- free -m typical output ----------
  #               total        used        free      shared  buff/cache   available
  # Mem:           1838         495         135          57        1207        1081
  # Swap:          1837           0        1837
  # --------------------------------------------
  ram=($(free -m | grep 'Mem:'))
  swap=($(free -m | grep 'Swap:'))
  initial_ram="$(get_config_var 'ram')"
  ram_json="$(print_json total "${ram[1]}" used "${ram[2]}" free "${ram[3]}" initial "${initial_ram}")"
  swap_json="$(print_json total "${swap[1]}" used "${swap[2]}" free "${swap[3]}")"
  print_json ram "${ram_json}" swap "${swap_json}"
}

info_json() {
  uptime=$(awk '{print $1}' /proc/uptime | sed 's/\..*//g')
  timestamp="$(date --utc --iso-8601=seconds | sed 's/\+.*/Z/')"
  print_json uptime "${uptime}" \
             load "$(load_json)" \
             timestamp "${timestamp}" \
             vmstat "$(vmstat_json)" \
             memory "$(memory_json)"
}

fcgi_json() {
  print_json installed "true" \
             socket "/var/run/{{ php_version }}-fpm-keitaro-nontracker.sock"
}

main() {
  print_json versions "$(versions_json)" \
             engines "$(engines_json)" \
             responses "$(responses_json)" \
             statuses "$(statuses_json)" \
             cpu "$(cpu_json)" \
             info "$(info_json)" \
             fcgi "$(fcgi_json)"
}

# Save stderr the $stderr variable (see https://stackoverflow.com/a/13806684/612799)
{ stderr=$(main 2>&1 1>&3-) ;} 3>&1

if [[ "${stderr}" != "" ]]; then
  echo "There was errors while generating stats.json:" >&2
  echo "${stderr}" >&2
  exit 1
fi
