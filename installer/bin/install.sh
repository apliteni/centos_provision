#!/usr/bin/env bash

# Generated by POWSCRIPT (https://github.com/coderofsalvation/powscript)
#
# Unless you like pain: edit the .pow sourcefiles instead of this file

# powscript general settings
set -e                         # halt on error
set +m                         #
SHELL="$(echo $0)"             # shellname
SHELLNAME="$(basename $SHELL)" # shellname without path
shopt -s lastpipe              # flexible while loops (maintain scope)
shopt -s extglob               # regular expressions
path="$(pwd)"
selfpath="$( dirname "$(readlink -f "$0")" )"
tmpfile="/tmp/$(basename $0).tmp.$(whoami)"
#
# generated by powscript (https://github.com/coderofsalvation/powscript)
#

on () 
{ 
    func="$1";
    shift;
    for sig in "$@";
    do
        trap "$func $sig" "$sig";
    done
}

empty () 
{ 
    [[ "${#1}" == 0 ]] && return 0 || return 1
}

isset () 
{ 
    [[ ! "${#1}" == 0 ]] && return 0 || return 1
}

values () 
{ 
    echo "$2"
}




declare -A DICT

DICT['en.errors.yum_not_installed']='This installer works only on yum-based systems. Please run it on CentOS/RHEL/Fedora distros'
DICT['en.prompts.license_ip']='Please enter server IP'
DICT['en.prompts.license_key']='Please enter license key'
DICT['en.prompts.db_name']='Please enter database name'
DICT['en.prompts.db_user']='Please enter database user name'
DICT['en.prompts.db_password']='Please enter database user password'
DICT['en.prompts.admin_login']='Please enter keitaro admin login'
DICT['en.prompts.admin_password']='Please enter keitaro admin password'
DICT['en.prompts.license_ip']='Please enter server IP'

DICT['ru.errors.yum_not_installed']='Утановщик keitaro работает только с пакетным менеджером yum. Пожалуйста, запустите его в CentOS/RHEL/Fedora дистрибутиве'
DICT['ru.prompts.license_ip']='Укажите IP адрес сервера'
DICT['ru.prompts.license_key']='Укажите лицензионный ключ'
DICT['ru.prompts.db_name']='Укажите имя базы данных'
DICT['ru.prompts.db_user']='Укажите пользователя базы данных'
DICT['ru.prompts.db_password']='Укажите пароль пользователя базы данных'
DICT['ru.prompts.admin_login']='Укажите имя администратора keitaro'
DICT['ru.prompts.admin_password']='Укажите пароль администратора keitaro'


detect_language(){
  if ! empty "$LC_ALL"; then
    detect_language_from_var "$LC_ALL"
  else
    if ! empty "$LC_MESSAGES"; then
      detect_language_from_var "$LC_MESSAGES"
    else
      detect_language_from_var "$LANG"
    fi
  fi
}


translate(){
  local key="${1}"
  i18n_key=$UI_LANG.$key
  echo "${DICT[$i18n_key]}"
}


detect_language_from_var(){
  local lang_value="${1}"
  if [[ "$lang_value" =~ ^ru_[[:alpha:]]+\.UTF-8$ ]]; then
    echo ru
  else
    echo en
  fi
}





ensure_yum_installed(){
  print_on_verbose 'Try to found yum'
  if is_installed 'yum'; then
    print_on_verbose 'OK, yum found'
  else
    print_on_verbose 'NOK, yum not found'
    print_err "$(translate errors.yum_not_installed)"
    exit 1
  fi
}


install_ansible_if_not_installed(){
  print_on_verbose 'Try to found ansible'
  if is_installed ansible; then
    print_on_verbose "OK, ansible found"
  else
    print_on_verbose "NOK, ansible not found"
    print_on_verbose "Try to install ansible"
    install_package epel-release
    install_package ansible
  fi
}


install_keitarotds(){
  get_keitaro_provision
  run_command "ansible-playbook -i "$INVENTORY_FILE" "$KEITARO_PROVISION_DIRECTORY"/playbook.yml"
}


is_installed(){
  local command="${1}"
  if isset "$SKIP_CHECKS"; then
    print_on_verbose "Actual check of '$command' presence skipped"
  else
    sh -c "command -v "$command" > /dev/null"
  fi
}


install_package(){
  local package="${1}"
  run_command "yum install -y "$package""
}


get_keitaro_provision(){
  KEITARO_RELEASE_URL=https://github.com/keitarocorp/centos_provision/archive/master.tar.gz
  run_command "curl -L "$KEITARO_RELEASE_URL" | tar xz"
}


run_command(){
  local command="${1}"
  echo "$command"
  if isset "$PRESERVE"; then
    print_on_verbose "Actual running disabled"
  else
    eval "$command"
  fi
}



declare -A VARS


write_inventory_file(){
  read_inventory_file_vars
  write_vars_to_inventory_file
}


read_inventory_file_vars(){
  read_var 'license_ip'
  read_var 'license_key'
  read_var 'db_name'
  read_var 'db_user'
  read_var 'db_password'
  read_var 'admin_login'
  read_var 'admin_password'
}


write_vars_to_inventory_file(){
  echo -n > "$INVENTORY_FILE"
  print_line_to_inventory_file "[server]"
  print_line_to_inventory_file "localhost connection=local"
  print_line_to_inventory_file
  print_line_to_inventory_file "[server:vars]"
  print_line_to_inventory_file "db_name="${VARS['db_name']}""
  print_line_to_inventory_file "db_user="${VARS['db_user']}""
  print_line_to_inventory_file "db_password="${VARS['db_password']}""
  print_line_to_inventory_file "license_ip="${VARS['license_ip']}""
  print_line_to_inventory_file "license_key="${VARS['license_key']}""
  print_line_to_inventory_file "admin_login="${VARS['admin_login']}""
  print_line_to_inventory_file "admin_password="${VARS['admin_password']}""
}


read_var(){
  local var_name="${1}"
  prompt=$(translate prompts.$var_name)
  echo -n "$prompt > "
  read -r variable
  VARS[$var_name]=$variable
}


print_line_to_inventory_file(){
  local line="${1}"
  echo "$line" >> "$INVENTORY_FILE"
}



parse_options(){
  while getopts ":hpvsl:" opt; do
    case $opt in
      p)
        PRESERVE=true
        ;;
      s)
        SKIP_CHECKS=true
        ;;
      v)
        VERBOSE=true
        ;;
      l)
        case $OPTARG in
          en)
            UI_LANG=en
            ;;
          ru)
            UI_LANG=ru
            ;;
          *)
            print_err "Specified language \"$OPTARG\" is not supported"
            exit 1
            ;;
        esac
        ;;
      :)
        print_err "Option -$OPTARG requires an argument."
        exit 1
        ;;
      h)
        usage
        exit 0
        ;;
      \?)
        usage
        exit 1
        ;;
    esac
  done
}


usage(){
  progname=$(basename "$0")
  print_err "$progname installs Keitarotds"
  print_err
  print_err "Usage: "$progname" [-psv] [-l en|ru]"
  print_err
  print_err "  -p"
  print_err "    The -p (preserve installation) option causes "$progname" to preserve the invoking of installation commands. Installation commands will be printed to stdout instead."
  print_err
  print_err "  -s"
  print_err "    The -s (skip checks) option causes "$progname" to skip checks of yum/ansible presence."
  print_err
  print_err "  -v"
  print_err "    The -v (verbose mode) option causes "$progname" to display more verbose information of installation process."
  print_err
  print_err "  -l <lang>"
  print_err "    By default "$progname" try to detect language from LANG environment variable, but you can explicitly set language with -l option."
  print_err "    Only en and ru (for English and Russian) values supported now."
}




print_err(){
  local message="${1}"
  echo "$message" >&2
}


print_on_verbose(){
  local message="${1}"
  if [[ "$VERBOSE" == "true" ]]; then
    echo "$message"
  fi
}





INVENTORY_FILE=.keitarotds-hosts
KEITARO_PROVISION_DIRECTORY=centos_provision-master




parse_options "$@"

if empty "$UI_LANG"; then
  UI_LANG=$(detect_language)
fi

print_on_verbose "Verbose mode: on"
print_on_verbose "Language: ${UI_LANG}"

ensure_yum_installed

install_ansible_if_not_installed

write_inventory_file

install_keitarotds

# wait for all async child processes (because "await ... then" is used in powscript)
[[ $ASYNC == 1 ]] && wait


# cleanup tmp files
if ls /tmp/$(basename $0).tmp.lda* &>/dev/null; then
  for f in /tmp/$(basename $0).tmp.lda*; do rm $f; done
fi

exit 0

