#Share
before_script:
  - export RELEASE_VERSION=`cat RELEASE_VERSION`

.git_init:
   before_script:
          # Add the private key to bot
          - eval $(ssh-agent -s) && ssh-add <(echo "$SSH_PRIVATE_KEY") && mkdir -p ~/.ssh
          # Docker specific settings
          - 'echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
          - chmod 600 ~/.ssh/config && chown $USER ~/.ssh/config
          # Config git to avoid first usage questions. Set the identity
          - git config --global user.email "bot@apliteni.com" && git config --global user.name "Gitlab CI"
          - git checkout $CI_COMMIT_REF_NAME


# Stages
stages:
  - quality_checks
  - make_release

# Jobs
run_rspec:
  tags: [shell, ruby]
  stage: quality_checks
  script:
    - ruby -v
    - ci/bin/compile.sh
    - ci/bin/validate.sh
    - cd scripts/
    - bundle install --path vendor/
    - bundle exec rspec
  cache:
    key: vendor
    paths:
      - vendor/
  only:
    - /^(production)$/

add_tags:
  tags:
    - shell
  stage: make_release
  script:
    - bash ci/bin/create_git_tag.sh
  only:
    - /^(production)$/

deploy_release_branch:
  extends: [.git_init]
  tags:
    - shell
  stage: make_release
  script:
    - echo "$RELEASE_VERSION"

    - git push -f -u git@gitlab.x.apli.tech:apliteni/keitaro/installer.git $CI_COMMIT_REF_NAME:release-$RELEASE_VERSION

  only:
    - /^(production)$/

deploy_to_current:
  tags:
    - shell
  stage: make_release
  script:
    # Add the private key to bot
    - eval $(ssh-agent -s) && ssh-add <(echo "$SSH_PRIVATE_KEY") && mkdir -p ~/.ssh
    # Config git to avoid first usage questions. Set the identity
    - git config --global user.email "bot@apliteni.com" && git config --global user.name "Gitlab CI"
    #always return true so that the build does not fail if there are no changes || true
    #- git push -f -u origin current
  only:
    - /^(production)$/
