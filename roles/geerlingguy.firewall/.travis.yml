---
services: docker

env:
  - distro: centos7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  - distro: centos6
    init: /sbin/init
    run_opts: "--privileged"
  - distro: ubuntu1604
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
  - distro: ubuntu1404
    init: /sbin/init
    run_opts: "--privileged"
  - distro: ubuntu1204
    init: /sbin/init
    run_opts: "--privileged"
  - distro: debian8
    init: /lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"

before_install:
  # Pull container.
  - 'docker pull geerlingguy/docker-${distro}-ansible:latest'

script:
  - container_id=$(mktemp)
  # Run container in detached state.
  - 'docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} geerlingguy/docker-${distro}-ansible:latest "${init}" > "${container_id}"'

  # Ansible syntax check.
  - 'docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml --syntax-check'

  # Test role.
  - 'docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml'

  # Test role idempotence.
  - idempotence=$(mktemp)
  - docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/test.yml | tee -a ${idempotence}
  - >
    tail ${idempotence}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # # Check if TCP port 9123 is open.
  # - >
  #   sudo iptables -L -n
  #   | grep -q "ACCEPT.*dpt:9123"
  #   && (echo 'Port 9123 is open - pass' && exit 0)
  #   || (echo 'Port 9123 is not open - fail' && exit 1)

  # # Check running firewall has exit code 0
  # - >
  #   sudo service firewall status
  #   && (echo 'Status of running firewall is 0 - pass' && exit 0)
  #   || (echo 'Status of running firewall is not 0 - fail' && exit 1)

  # # Stop firewall
  # - >
  #   sudo service firewall stop
  #   && (echo 'Stopping firewall - pass' && exit 0)
  #   || (echo 'Stopping firewall - fail' && exit 1)

  # # Check stopped firewall has exit code 3
  # - >
  #   sudo service firewall status;
  #   EXIT=$?;
  #   if [ 3 -eq $EXIT ]; then
  #     echo 'Status of stopped firewall is 3 - pass' && exit 0;
  #   else
  #     echo 'Status of stopped firewall is not 3 - fail' && exit 1;
  #   fi

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
