#!/bin/bash

RR_CONFIG={{ rr_config }}
RR_BIN={{ rr_bin }}
JID_LENGTH=5
WATCHDOG_USEC="${WATCHDOG_USEC:-60000000}" # Set default watchdog interval to 60 secs
WATCH_INTERVAL=$((${WATCHDOG_USEC} / 1000000 / 2)) # We will notify watchdog every half of WATCHDOG_USEC

print_err() {
  local err="${1}"
  (>&2 echo "${err}")
}

keitaro_log() {
  local level="${1}"
  local message="${2}"
  local date="$(date +"%F" -u)"
  local time="$(date +"%T" -u)"
  local jid="$(echo ${date} ${time} | md5sum | head -c ${JID_LENGTH})"
  log_line="[${date} ${time}] [${level}] (jid:${jid}) [\"systemd\"] : RoadRunner: ${message}"
  echo "${log_line}" >> {{ keitaro_root }}/var/log/production-${date}.log
}

log_and_print_err() {
  local level="${1}"
  local message="${2}"
  print_err "[${level}] ${message}"
  keitaro_log "${level}" "${message}"
}

usage() {
  print_err "Usage: keitaro-roadrunner COMMAND"
}

rr_cmd() {
  local cmd=${1}
  shift
  echo "[INFO] Run command ${RR_BIN} ${cmd} -l plain -c ${RR_CONFIG} $@"
  ${RR_BIN} ${cmd} -l plain -c ${RR_CONFIG} "$@"
}

notify_systemd_watchdog() {
  local packet="${1}"
  local state="${2}"
  echo "[INFO] Notify SystemD watchdog that RoadRunner is ${state}"
  # Sadly we can't use systemd-notify because it is broken for non-root users, see
  #     https://github.com/rabbitmq/rabbitmq-server/issues/664#issuecomment-195282865
  #     https://github.com/systemd/systemd/issues/2739
  echo -en "MAINPID=$WATCHDOG_PID\n${packet}\n" | socat unix-sendto:$NOTIFY_SOCKET STDIO
}

notify_systemd_watchdog_rr_is_started() {
  notify_systemd_watchdog "READY=1" "started"
}

notify_systemd_watchdog_rr_is_alive() {
  notify_systemd_watchdog "WATCHDOG=1" "alive"
}

is_alive() {
  local pid="${1}"
  kill -0 ${pid} 2>/dev/null
}

wait_for_next_tick() {
  sleep ${WATCH_INTERVAL}
}

watch_daemon() {
  local daemon_pid="${1}"
  local error=""

  notify_systemd_watchdog_rr_is_started

  while(true); do

    if ! is_alive ${daemon_pid}; then
      log_and_print_err "WARNING" "Process ${daemon_pid} gone."
    elif ! workers > /dev/null; then
      log_and_print_err "WARNING" "There was error while getting workers list."
    else
      notify_systemd_watchdog_rr_is_alive
    fi

    wait_for_next_tick
  done
}

start_with_watchdog_notifying() {
  echo "[INFO] Starting RoadRunner with watchdog notifying"
  trap 'kill $(jobs -p) 2>/dev/null' EXIT

  rr_cmd serve -v &
  local daemon_pid=$!

  watch_daemon ${daemon_pid}
}

start_without_watchdog_notifying() {
  echo "[INFO] Starting RoadRunner without watchdog notifying"
  rr_cmd serve -v
}

start() {
  if [ -S "${NOTIFY_SOCKET}" ]; then
    start_with_watchdog_notifying
  else
    start_without_watchdog_notifying
  fi
}

stop() {
  rr_cmd stop -v -d
}

reload() {
  rr_cmd http:reset -v -d
}

workers() {
  rr_cmd http:workers
}

if [[ "$#" != "1" ]]; then
  usage
  exit 1
fi

case ${1} in
  start)
    start
    ;;
  stop)
    stop
    ;;
  reload)
    reload
    ;;
  workers)
    workers
    ;;
  *)
    usage
    exit 1
    ;;
esac
