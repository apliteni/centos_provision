#!/bin/bash
set -v -o pipefail -e

config_dir=${1-/etc/nginx/conf.d}
mysql_host=${2-localhost}
mysql_database=${3-keitaro}

echo "Using $config_dir directory for searching configs"

cd "$config_dir/" || return

# Searching for configs generated by enable-ssl
grep -l "enable-ssl" -- *.conf \
  | sed 's/.conf//g' \
  > domains_with_ssl_certs.txt || sleep 1000

# Getting list of domains in DB
mysql -h "$mysql_host" "$mysql_database" -sNe "SELECT name FROM keitaro_domains ORDER BY name" \
  | uniq \
  > domains_to_keep.txt

# Searching for custom domains
(grep -l "add-site" -- *.conf || echo "") | sed 's/.conf//g' >> domains_to_keep.txt


# Exclude domains exists in domains_to_keep.txt
comm -23 <(sort domains_with_ssl_certs.txt) <(sort domains_to_keep.txt) \
  > domains_to_delete.txt

numbers=$(wc -l < domains_to_delete.txt)
echo -n "Disabling $numbers ssl configs"

# Call kctl-disable-ssl for each domain
while read -r domain; do
  # We must be absolutely sure that we don't delete exists domain
  mysql -e "select count(*) from ${mysql_database}.keitaro_domains where name = '${domain}'" \
        | grep '1' && exit 1 && echo "Attempt to delete exists domain ${domain}"

  if [ -z "$DRY_MODE" ]; then
    kctl-disable-ssl -D "$domain"
  else
    echo "kctl-disable-ssl -D $domain"
  fi
done <domains_to_delete.txt


# Cleaning
rm domains_with_ssl_certs.txt domains_to_keep.txt domains_to_delete.txt
